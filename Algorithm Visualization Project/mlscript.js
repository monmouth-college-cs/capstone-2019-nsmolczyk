var SVGwidth = 800,
    SVGheight = 500;


var dataset1 = [[7.25045143e-01, 9.18, 836606e+00], [-1.80465560e+00, 6.29217804e+00], [-7.02513863e+00, 6.34758764e+00], [-4.01257794e+00, -6.38677630e+00], [-1.80061035e+00, -5.84216591e+00], [5.47825341e-01, 8.90074116e+00], [6.74686252e-01, 9.31597481e+00], [-9.06653936e-02, 9.02259881e-01], [-2.82581659e+00, -1.65581452e+00], [-3.44727901e+00, -1.65663274e+00], [-1.05801490e+01, 2.00672817e+00], [-1.00705364e+01, -7.81802230e+00], [-1.88447672e-03, -9.53809590e+00], [-7.98850539e+00, 1.42346913e+00], [-5.72211745e+00, -6.61291720e-01], [-3.71455172e+00, 3.54250054e+00], [9.00525184e+00, -1.52871323e+00], [3.31855524e-02, 1.68589719e+00], [8.12343000e+00, -8.76748103e+00], [-8.09004399e+00, 2.81589959e+00], [-3.60922816e+00, 6.13993752e+00], [-5.32937149e+00, -9.06790378e+00], [1.03768530e+01, 1.84745181e+00], [-7.36489504e+00, 2.31045279e+00], [-4.06875623e+00, 3.86771774e+00], [-7.62573987e-01, -4.56848827e+00], [9.63152706e+00, -6.82221242e+00], [9.33853581e+00, -1.02182548e+00], [2.52970736e+00, -1.02387510e+01], [-7.87249725e+00, 1.04363929e+01], [-3.77657047e+00, -7.81874388e+00], [6.21092629e+00, -5.21502396e-01], [-6.98432889e+00, 4.53394349e+00], [-2.42137918e+00, 9.77908120e+00], [4.81838020e+00, 6.57380443e+00], [9.30122030e+00, 4.31331402e+00], [9.26748823e+00, 9.68899063e-01], [-4.72939718e+00, -7.31500262e+00], [2.73902027e+00, 3.36019010e+00], [-1.88879762e-01, 5.20461381e+00], [-3.17120534e+00, 2.38359559e+00], [-8.41260534e+00, -7.62238257e+00], [9.84514900e-01, 1.95211539e+00], [-6.97827534e+00, -5.53577368e+00], [-7.21248728e+00, 7.59687640e+00], [9.88733458e+00, -1.40896295e+00], [8.34693133e+00, 6.82753426e+00], [-1.66187476e+00, 7.08800520e+00], [7.01117440e-01, 2.40194193e+00], [9.07433439e+00, 7.91270334e+00], [3.89984477e+00, -8.42022161e+00], [4.17617037e-01, 5.92752614e+00], [8.33210009e+00, 4.05245603e+00], [-1.05084543e+01, 7.76941320e+00], [3.97683617e-01, -2.87485470e+00], [-1.04350984e-01, -7.85128543e+00], [-7.72862858e+00, -7.23269545e+00], [2.31949471e+00, 8.66418413e+00], [-1.09115395e+01, 6.19081231e+00], [2.26153420e+00, -4.10998559e+00], [2.38789340e+00, 8.86279586e+00], [1.64459839e+00, 2.10075821e+00], [4.41566637e+00, 6.96242292e+00], [1.22744200e+00, -7.18539540e+00], [2.92846495e+00, -3.85642414e+00], [1.20875699e+00, -8.83257046e-01], [8.17853545e-01, 1.84536005e+00], [-7.54021272e+00, -8.60549017e+00], [-4.43062780e+00, -9.24191981e+00], [1.02276464e+01, -6.23205078e-01], [1.20713935e+01, -9.01911961e+00], [3.08716577e+00, -8.82896368e+00], [1.70285409e+00, -4.55014838e+00], [-4.36903341e+00, -8.38693783e+00], [-5.97068757e-01, 1.27052859e+00], [-8.00268802e+00, -8.46571276e+00], [-8.23731759e+00, 8.94554342e+00], [1.02205072e+01, -2.48617972e+00], [1.44193252e+00, 2.76754364e+00], [-5.40887486e+00, -1.35925832e+00], [-4.73321388e+00, 4.74664288e+00], [-5.07806960e+00, 5.24529461e+00], [2.42189151e+00, -6.29308025e+00], [4.47368879e+00, -9.37127854e+00], [2.39842099e+00, 2.57086097e+00], [-4.30523020e+00, -9.25278388e+00], [-5.58361344e-01, -9.34636466e+00], [9.13938920e+00, -8.44013090e+00], [4.67419551e-01, -6.63002145e+00], [8.31767326e+00, -8.91169608e+00], [-6.54609197e+00, -8.68341226e+00], [-6.75236366e+00, -9.65945791e-01], [3.34854115e-01, -8.02723656e+00], [1.72790804e+00, -6.28088546e+00], [-6.90091242e+00, 4.60563985e+00], [-5.26845775e+00, -7.33305196e+00], [9.60243096e-01, -1.87830753e+00], [4.09457708e+00, -9.11481898e+00], [-9.64122441e+00, 2.73186168e+00], [7.70739465e+00, -9.41008953e+00], [1.04572949e+01, -6.65725756e+00], [5.42858605e+00, -1.07868676e+01], [-1.82143961e+00, 9.58629284e-01], [2.34051562e+00, 8.59121660e+00], [-8.42579116e+00, 9.16042921e+00], [-8.41867122e+00, 5.14679192e+00], [-5.72473991e+00, -6.19085596e+00], [1.69027910e+00, -6.19125896e-01], [3.87378012e+00, -8.42528593e+00], [2.41163392e+00, 1.60423683e+00], [3.58682042e-01, -1.68244411e-02], [-6.50770280e+00, 7.29132069e+00], [-9.66387366e+00, 8.36573963e+00], [1.03694461e+01, 1.56642096e+00], [6.19303186e-01, 8.74150467e+00], [-1.00878000e+01, 2.83419142e+00], [-4.23899035e+00, -2.83063710e+00], [2.85202394e+00, -2.97262087e+00], [-8.18327212e+00, -9.35047551e+00], [8.64178570e-02, 4.95955793e+00], [9.51350719e+00, -4.66047799e-01], [2.15504965e+00, 4.12386249e+00], [2.14647505e+00, 2.90594104e+00], [5.39934721e+00, 2.42716212e+00], [8.41202952e+00, -4.21104670e-01], [-8.27812989e+00, 5.75017274e-01], [-2.61061733e+00, -6.77289368e+00], [-2.75278819e+00, 3.23310013e+00], [-3.21927213e+00, -6.48434375e+00], [7.69754315e-01, -1.03909664e+01], [2.26354250e+00, 1.87430270e+00], [1.50446069e-01, 5.92931118e+00], [-5.39330243e+00, -1.01940668e+01], [6.10660455e+00, -8.59922115e+00], [5.90975147e-01, 9.05118196e+00], [4.91582860e+00, -8.55600585e+00], [-4.68074233e+00, -8.53761405e+00], [-4.34384156e+00, -3.11673796e+00], [-8.14667191e+00, 4.21615478e+00], [6.30313005e+00, -1.06158184e+01], [-8.90210374e+00, 3.04179390e+00], [-2.86147932e-01, -1.01373037e+01], [-7.97796359e+00, -8.10478943e+00], [6.13273894e+00, 1.90428429e+00], [-3.19769120e+00, -2.84188852e+00], [-2.94272257e+00, -1.55715180e+00], [1.04610377e+01, -2.87010983e-01], [-4.02384993e+00, 2.18878708e+00], [7.71877914e+00, 4.41760408e+00], [-6.75619038e+00, -3.83957399e+00], [-1.65751042e+00, -1.79742332e-01], [-4.99984337e+00, -3.07888239e+00], [-6.10323495e+00, -7.32407388e+00], [2.03318598e+00, 8.91939460e+00], [5.97894196e+00, -8.33832998e+00], [-1.39999192e+00, 3.31987162e+00], [3.75593966e+00, -5.09374139e+00], [3.13925966e+00, -1.02619149e+01], [2.60973693e+00, 2.02939344e+00], [-1.01635848e+01, 4.64974034e+00], [-9.02616452e+00, 3.61597573e+00], [6.05517105e+00, -7.90127063e+00], [2.60020238e+00, -3.70233251e-01], [-1.05866435e+00, -5.01713657e+00], [1.40800716e+00, -1.08608670e+01], [6.68977094e+00, 6.32031146e+00], [1.65209057e+00, 2.12010873e+00], [3.56246684e-01, 1.57012320e+00], [-1.51640399e+00, 4.70375276e+00], [2.46452227e+00, 6.19967650e+00], [4.57836791e+00, -8.33606524e+00], [7.89793746e+00, -1.07885093e+01], [-3.11885496e+00, -2.93536473e+00], [1.29339475e+00, -2.07797019e-01], [-1.73552067e+00, -2.33569126e+00], [-8.43792115e+00, 2.10887065e+00], [6.86558561e-01, 8.54376332e+00], [-7.35410945e-01, -5.21879344e+00], [5.65572067e+00, -9.49576596e+00], [-2.87367323e+00, -1.35844729e+00], [-2.79738901e+00, 3.88727897e+00], [6.27924234e+00, -7.45767354e+00], [-6.22191391e+00, -6.40375375e+00], [5.13993290e+00, 4.28263855e-01], [9.58471675e+00, 2.59074717e+00], [-7.15955994e-01, -5.39837535e+00], [-7.12899173e+00, -5.11567896e+00], [8.57215150e+00, 4.43840019e+00], [3.72854959e+00, -5.39488774e+00], [9.81566347e+00, 1.10378678e+00], [1.05217877e+01, 6.07072253e+00], [7.11885561e-01, 3.08407323e-01], [6.99838609e+00, -7.70832003e+00], [1.75239591e+00, 4.02313677e+00], [-2.69572582e+00, -7.43184102e+00], [-4.65106766e+00, -6.15483433e+00], [-5.94062892e+00, -7.45398785e+00], [5.46468249e+00, 6.73676468e+00], [4.64416267e+00, -8.10074142e+00], [-7.82424335e+00, -2.17456212e+00]],
    dataset2 = [[4, 7.25878074], [5.73747813, -4.91767757], [6.5393049, -7.28650692], [-9.13792057, 3.93487751], [-9.84499536, 3.90358185], [-9.52899081, 4.49055171], [2.58197266, 6.22931526], [6.66252671, -4.59522593], [1.37686391, 6.2135008], [-8.31735667, 4.03168334], [6.24195539, -6.52359725], [2.98413848, 6.49612646], [-10.13046867, 3.74861793], [3.2136287, 5.70563355], [6.04931199, -5.03536867], [-9.32289298, 3.80416702], [6.52095397, -5.56137341], [8.35527713, -5.78558436], [6.87928444, -7.81154325], [2.31006825, 6.50708214], [7.70042813, -4.40211842], [-8.9668716, 5.59109253], [6.55475341, -6.11039621], [2.82777892, 7.39862202], [6.10360096, -3.62728262], [3.36425788, 8.28057374], [6.91190667, -7.18419039], [3.00078009, 6.97666204], [-8.52218743, 3.45919897], [2.11113982, 8.82430434], [3.98611876, 7.32537385], [1.41320106, 6.02343203], [5.4186229, -5.88187051], [-10.93923607, 5.58603781], [1.49128935, 7.42403982], [3.29838876, 7.9394846], [6.79615445, -5.50780112], [-8.6688509, 5.05041893], [3.23937864, 7.03426606], [-9.14958192, 3.04053243], [-9.03648141, 4.14241408], [3.70423002, 6.42044112], [2.39667985, 7.71208274], [4.85703031, -6.64610632], [6.32706302, -5.23845546], [3.27280281, 7.08163727], [-10.30316904, 5.32726901], [-7.95967807, 5.33163879], [-8.05984832, 3.61411215], [-8.28813353, 5.49582582], [6.52825923, -4.85966871], [6.04653719, -4.98202633], [7.0470246, -4.9698237], [-7.70156156, 5.06945136], [2.44179081, 5.83760913], [6.57278458, -5.92014978], [2.02513294, 5.61753992], [-10.47840222, 5.61432479], [-10.51030388, 3.55210154], [2.57485921, 7.02047947], [-9.68687067, 4.63894541], [3.88933654, 6.55588921], [-10.91888545, 4.98883809], [5.98850676, -7.05767056], [-8.97355019, 5.74758896], [5.44529062, -5.68289744], [3.94067841, -4.5221365], [3.18729821, 7.20739723], [1.17394077, 5.14924894], [-9.12641613, 5.78866385], [-9.36390962, 4.42548585], [5.34774572, -4.81352151], [4.71709834, -6.05579952], [5.4617007, -5.50102736], [-10.27883557, 3.52020405], [7.37896273, -3.14029671], [3.65685625, 8.26284808], [-8.56948224, 6.56459371], [-9.56251592, 6.38485572], [6.63771033, -5.38398857], [1.91716219, 7.37955779], [-10.0078659, 6.68116016], [5.97126063, -4.16001805], [-8.8486738, 4.35869738], [5.97082828, -3.38458743], [-8.60509554, 4.97288341], [2.9111871, 7.03378115], [1.21439035, 6.97732424], [3.90053408, 8.55165315], [3.36438072, 7.16565543], [-8.98426395, 5.1264594], [-10.7539331, 5.09695812], [5.2955571, -5.36269952], [3.2222261, 7.1562285], [-8.71795917, 5.02128451], [0.75324441, 6.41036223], [0.65211899, 6.66828349], [7.35192747, -4.27822837], [5.80587834, -4.136149], [7.67669223, -6.4521335]],
    dataset3 = [[6.54634946e-01, -4.38468422e-01], [5.95216657e-01, -4.14412623e-01], [3.76510198e-01, -2.81831482e-01], [1.84408430e-02, 3.08841371e-01], [2.22520934e-01, 9.74927912e-01], [9.67948422e-01, -4.99486216e-01], [3.45365054e-01, 9.38468422e-01], [7.77479066e-01, -4.74927912e-01], [5.09442530e-02, 1.84891782e-01], [-4.04783343e-01, 9.14412623e-01], [8.71318704e-01, 4.90717552e-01], [1.94905575e+00, 1.84891782e-01], [7.30832427e-02, 1.24732995e-01], [4.27883340e-01, -3.20172255e-01], [9.49055747e-01, 3.15108218e-01], [9.91790014e-01, 1.27877162e-01], [4.04783343e-01, 9.14412623e-01], [-8.71318704e-01, 4.90717552e-01], [2.05460725e-03, 4.35929780e-01], [1.46253829e+00, -3.86599306e-01], [-4.62538290e-01, 8.86599306e-01], [0.00000000e+00, 5.00000000e-01], [-2.22520934e-01, 9.74927912e-01], [-2.84527587e-01, 9.58667853e-01], [-9.26916757e-01, 3.75267005e-01], [5.37461710e-01, -3.86599306e-01], [5.18392568e-01, 8.55142763e-01], [1.57211666e+00, -3.20172255e-01], [-7.61445958e-01, 6.48228395e-01], [1.59599895e-01, 9.87181783e-01], [1.80141362e+00, -9.81105305e-02], [1.34536505e+00, -4.38468422e-01], [9.81559157e-01, 1.91158629e-01], [1.98586378e-01, -9.81105305e-02], [6.23489802e-01, 7.81831482e-01], [9.60230259e-02, 9.95379113e-01], [1.99179001e+00, 3.72122838e-01], [3.27051370e-02, 2.46345416e-01], [-9.97945393e-01, 6.40702200e-02], [1.15959990e+00, -4.87181783e-01], [7.61445958e-01, 6.48228395e-01], [-8.38088105e-01, 5.45534901e-01], [1.40478334e+00, -4.14412623e-01], [8.40400105e-01, -4.87181783e-01], [1.22252093e+00, -4.74927912e-01], [9.03976974e-01, -4.95379113e-01], [-5.18392568e-01, 8.55142763e-01], [1.61911895e-01, -4.55349012e-02], [-9.49055747e-01, 3.15108218e-01], [6.72300890e-01, 7.40277997e-01], [1.28681296e-01, 9.28244800e-03], [9.67294863e-01, 2.53654584e-01], [-3.20515776e-02, 9.99486216e-01], [1.92691676e+00, 1.24732995e-01], [-9.00968868e-01, 4.33883739e-01], [9.26916757e-01, 3.75267005e-01], [1.98155916e+00, 3.08841371e-01], [-5.72116660e-01, 8.20172255e-01], [7.15472413e-01, -4.58667853e-01], [-3.45365054e-01, 9.38468422e-01], [1.87131870e+00, 9.28244800e-03], [4.81607432e-01, -3.55142763e-01], [8.38088105e-01, 5.45534901e-01], [-9.60230259e-02, 9.95379113e-01], [1.71834935e+00, -1.95682551e-01], [1.96729486e+00, 2.46345416e-01], [-8.01413622e-01, 5.98110530e-01], [-7.18349350e-01, 6.95682551e-01], [-6.23489802e-01, 7.81831482e-01], [1.09602303e+00, -4.95379113e-01], [-9.81559157e-01, 1.91158629e-01], [3.27699110e-01, -2.40277997e-01], [1.76144596e+00, -1.48228395e-01], [5.72116660e-01, 8.20172255e-01], [1.90096887e+00, 6.61162609e-02], [2.00000000e+00, 5.00000000e-01], [-6.72300890e-01, 7.40277997e-01], [1.51839257e+00, -3.55142763e-01], [9.97945393e-01, 6.40702200e-02], [1.83808810e+00, -4.55349012e-02], [-9.67294863e-01, 2.53654584e-01], [2.38554042e-01, -1.48228395e-01], [2.84527587e-01, 9.58667853e-01], [-9.91790014e-01, 1.27877162e-01], [8.20998618e-03, 3.72122838e-01], [1.03205158e+00, -4.99486216e-01], [8.01413622e-01, 5.98110530e-01], [9.00968868e-01, 4.33883739e-01], [-1.59599895e-01, 9.87181783e-01], [3.20515776e-02, 9.99486216e-01], [7.18349350e-01, 6.95682551e-01], [2.81650650e-01, -1.95682551e-01], [1.62348980e+00, -2.81831482e-01], [1.67230089e+00, -2.40277997e-01], [1.00000000e+00, 0.00000000e+00], [4.62538290e-01, 8.86599306e-01], [1.99794539e+00, 4.35929780e-01], [-1.00000000e+00, 1.22464680e-16], [9.90311321e-02, 6.61162609e-02], [1.28452759e+00, -4.58667853e-01]],
    datasets = [dataset1, dataset2, dataset3];

var $numClusters = $('#numclusters'),
    num = parseInt($numClusters.val(), 10);
cont = true;

var $dataSelection = $('#dataSelect'),
    dataSelection = parseInt($dataSelection.val(), 10);
data1 = datasets[dataSelection];

var domainX = d3.extent(data1, function (d) { return d[0] }),
    domainY = d3.extent(data1, function (d) { return d[1] });

var SVGRangeX = [0, SVGwidth],
    SVGRangeY = [0, SVGheight];

var xLinearScale = d3.scaleLinear().domain(domainX).range(SVGRangeX),
    yLinearScale = d3.scaleLinear().domain(domainY).range(SVGRangeY);

var SVG = d3.select('svg')
    .attr('width', SVGwidth)
    .attr('height', SVGheight);

var colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple', 'pink', 'black'];

var circles = SVG.selectAll("circle")
    .data(data1)
    .enter()
    .append('circle')
    .attr('cx', function (d, i) { return xLinearScale(d[0]); })
    .attr('cy', function (d, i) { return yLinearScale(d[1]); })
    .attr('r', 5);

var centers = SVG.selectAll('rect')
    .data(initializeCenters(num))
    .enter()
    .append("rect")
    .attr("width", 20)
    .attr("height", 20)
    .attr("x", function (d, i) { return xLinearScale(d[0]); })
    .attr("y", function (d, i) { return yLinearScale(d[1]); })
    .attr("fill", function (d, i) { return colors[i] });

function setup() {
    $numClusters = $('#numclusters'),
        num = parseInt($numClusters.val(), 10);

    $dataSelection = $('#dataSelect'),
        dataSelection = parseInt($dataSelection.val(), 10);
    data1 = datasets[dataSelection];

    reset();
}

function start() {
    if (cont) {
        cont = false;
        kMeans(data1, num);
    }
}

function reset() {

    d3.selectAll("circle").remove();

    domainX = d3.extent(data1, function (d) { return d[0] }),
        domainY = d3.extent(data1, function (d) { return d[1] });

    xLinearScale = d3.scaleLinear().domain(domainX).range(SVGRangeX),
        yLinearScale = d3.scaleLinear().domain(domainY).range(SVGRangeY);

    circles = SVG.selectAll("circle")
        .data(data1)
        .enter()
        .append('circle')
        .attr('cx', function (d, i) { return xLinearScale(d[0]); })
        .attr('cy', function (d, i) { return yLinearScale(d[1]); })
        .attr('r', 5);

    d3.selectAll("rect").remove();

    centers = SVG.selectAll('rect')
        .data(initializeCenters(num))
        .enter()
        .append("rect")
        .attr("width", 20)
        .attr("height", 20)
        .attr("x", function (d, i) { return xLinearScale(d[0]); })
        .attr("y", function (d, i) { return yLinearScale(d[1]); })
        .attr("fill", function (d, i) { return colors[i] });

    cont = true;
}

function drawClusters(assignments, ClusterCenters) {

    circles = SVG.selectAll("circle")
        .attr('fill', function (d, i) { return colors[assignments[i]] });

    centers = SVG.selectAll('rect')
        .data(ClusterCenters)
        .transition().duration(1000)
        .attr("width", 20)
        .attr("height", 20)
        .attr("x", function (d, i) { return xLinearScale(d[0]); })
        .attr("y", function (d, i) { return yLinearScale(d[1]); })
        .attr("fill", function (d, i) { return colors[i] });
}

function sleep(time) {
    return new Promise((resolve) => setTimeout(resolve, time));
}

function initializeCenters(numCenters) {

    var centers = [];
    var i = 0;

    while (i < numCenters) {
        var x = Math.random() * domainX[1];   // Random x coordinate
        var y = Math.random() * domainY[1];  // Random y coordinate 
        var center = [x, y];
        console.log(center)
        centers.push(center);
        i++;
    }
    return (centers);
}

function indexOfSmallest(array) {
    var lowest = 0;
    for (var i = 1; i < array.length; i++) {
        if (array[i] < array[lowest]) lowest = i;
    }
    return lowest;
}

function round(value, decimals) {
    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
}

function findNearestCluster(data, clusterCenters) {

    var assignments = [];

    for (var i = 0; i < data.length; i++) {   // For each data point 

        var distances = [];

        for (var j = 0; j < clusterCenters.length; j++) {  // For each cluster center
            var x1 = data[i][0];
            var y1 = data[i][1];
            var x2 = clusterCenters[j][0];
            var y2 = clusterCenters[j][1];

            var val = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            distances.push(round(val, 3)); // Compile an array of distances to each center 
        }
        assignments.push(indexOfSmallest(distances)); // Push the index of the smallest distance, this index corresponds to the ith cluster center
    }
    return assignments;
}

function updateCenters(OldCenters, data, assignments) {

    var newCenters = [];

    for (var k = 0; k < OldCenters.length; k++) { // For each center 

        var Xs = 0,
            Ys = 0,
            count = 0;

        for (var j = 0; j < assignments.length; j++) { // For each data point
            if (assignments[j] == k) {
                Xs += data[j][0];
                Ys += data[j][1];
                count++;
            }
        }

        if (count != 0) {
            var updatedCenter = [round(Xs / count, 3), round(Ys / count, 3)];
            newCenters.push(updatedCenter);
        } else {
            newCenters.push(OldCenters[k]);
        }
    }
    return newCenters;
}

async function kMeans(data, numClusters) {

    var clusterCenters = initializeCenters(numClusters);
    var assignments = findNearestCluster(data, clusterCenters);

    for (var i = 0; i < 5; i++) {
        assignments = findNearestCluster(data, clusterCenters);
        clusterCenters = updateCenters(clusterCenters, data, assignments);
        await sleep(1000);
        drawClusters(assignments, clusterCenters, data);
    }
}









